// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "CameraInterface.h"

void CameraInterface::cb_Fixed_i(Fl_Menu_*, void*) {
  RedrawWindow();
}
void CameraInterface::cb_Fixed(Fl_Menu_* o, void* v) {
  ((CameraInterface*)(o->parent()->user_data()))->cb_Fixed_i(o,v);
}

void CameraInterface::cb_Eye_i(Fl_Menu_*, void*) {
  RedrawWindow();
}
void CameraInterface::cb_Eye(Fl_Menu_* o, void* v) {
  ((CameraInterface*)(o->parent()->user_data()))->cb_Eye_i(o,v);
}

void CameraInterface::cb_Focus_i(Fl_Menu_*, void*) {
  RedrawWindow();
}
void CameraInterface::cb_Focus(Fl_Menu_* o, void* v) {
  ((CameraInterface*)(o->parent()->user_data()))->cb_Focus_i(o,v);
}

void CameraInterface::cb_Zoom_i(Fl_Menu_*, void*) {
  RedrawWindow();
}
void CameraInterface::cb_Zoom(Fl_Menu_* o, void* v) {
  ((CameraInterface*)(o->parent()->user_data()))->cb_Zoom_i(o,v);
}

void CameraInterface::cb_Roll_i(Fl_Menu_*, void*) {
  RedrawWindow();
}
void CameraInterface::cb_Roll(Fl_Menu_* o, void* v) {
  ((CameraInterface*)(o->parent()->user_data()))->cb_Roll_i(o,v);
}

void CameraInterface::cb_Near_i(Fl_Menu_*, void*) {
  RedrawWindow();
}
void CameraInterface::cb_Near(Fl_Menu_* o, void* v) {
  ((CameraInterface*)(o->parent()->user_data()))->cb_Near_i(o,v);
}

void CameraInterface::cb_Keyboard_i(Fl_Menu_*, void*) {
  RedrawWindow();
}
void CameraInterface::cb_Keyboard(Fl_Menu_* o, void* v) {
  ((CameraInterface*)(o->parent()->user_data()))->cb_Keyboard_i(o,v);
}

void CameraInterface::cb_IBar_i(Fl_Menu_*, void*) {
  RedrawWindow();
}
void CameraInterface::cb_IBar(Fl_Menu_* o, void* v) {
  ((CameraInterface*)(o->parent()->user_data()))->cb_IBar_i(o,v);
}

Fl_Menu_Item CameraInterface::menu_m_iSequence[] = {
 {"Fixed Position", 0,  (Fl_Callback*)CameraInterface::cb_Fixed, 0, 4, FL_NORMAL_LABEL, 0, 14, 0},
 {"Eye Position", 0,  (Fl_Callback*)CameraInterface::cb_Eye, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Focus Point", 0,  (Fl_Callback*)CameraInterface::cb_Focus, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Zoom", 0,  (Fl_Callback*)CameraInterface::cb_Zoom, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Roll", 0,  (Fl_Callback*)CameraInterface::cb_Roll, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Near-Far", 0,  (Fl_Callback*)CameraInterface::cb_Near, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Keyboard", 0,  (Fl_Callback*)CameraInterface::cb_Keyboard, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"IBar", 0,  (Fl_Callback*)CameraInterface::cb_IBar, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void CameraInterface::cb_m_bPlayPause_i(Fl_Button*, void*) {
  cameraUI.setPlayPause();
}
void CameraInterface::cb_m_bPlayPause(Fl_Button* o, void* v) {
  ((CameraInterface*)(o->parent()->user_data()))->cb_m_bPlayPause_i(o,v);
}

void CameraInterface::cb_Next_i(Fl_Button*, void*) {
  cameraUI.setNextFrame();
}
void CameraInterface::cb_Next(Fl_Button* o, void* v) {
  ((CameraInterface*)(o->parent()->user_data()))->cb_Next_i(o,v);
}

void CameraInterface::cb_Print_i(Fl_Button*, void*) {
  cameraUI.print();
}
void CameraInterface::cb_Print(Fl_Button* o, void* v) {
  ((CameraInterface*)(o->parent()->user_data()))->cb_Print_i(o,v);
}

Fl_Double_Window* CameraInterface::make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = m_cameraWindow = new Fl_Double_Window(155, 165, "Camera UI");
    w = o;
    o->user_data((void*)(this));
    { Fl_Choice* o = m_iSequence = new Fl_Choice(5, 25, 145, 30, "Test Sequence");
      o->down_box(FL_BORDER_BOX);
      o->align(FL_ALIGN_TOP_LEFT);
      o->menu(menu_m_iSequence);
    }
    { Fl_Button* o = m_bPlayPause = new Fl_Button(10, 70, 135, 25, "Play / Pause");
      o->type(1);
      o->callback((Fl_Callback*)cb_m_bPlayPause);
    }
    { Fl_Button* o = new Fl_Button(10, 100, 135, 25, "Next Frame");
      o->callback((Fl_Callback*)cb_Next);
    }
    { Fl_Button* o = new Fl_Button(10, 135, 135, 25, "Print camera");
      o->callback((Fl_Callback*)cb_Print);
    }
    o->end();
    o->resizable(o);
  }
  return w;
}

CameraInterface::CameraInterface() {
  m_cameraWindow = make_window();
cameraUI.setUI( this );
}

UIInterface * CameraInterface::getUI() {
  return &cameraUI;
}
