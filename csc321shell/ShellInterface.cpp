// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "ShellInterface.h"

void ShellInterface::cb_Read_i(Fl_Menu_*, void*) {
  const char *strBack = fl_file_chooser("Image name?", "*.{png,bmp,jpg}", strImageName.c_str() );

if ( strBack ) {
    glWindow->readImage( strBack );
    strImageName = strBack;
}
glWindow->redraw();
}
void ShellInterface::cb_Read(Fl_Menu_* o, void* v) {
  ((ShellInterface*)(o->parent()->user_data()))->cb_Read_i(o,v);
}

void ShellInterface::cb_Screen_i(Fl_Menu_*, void*) {
  const char *strBack = fl_file_chooser("Image name?", "*.bmp", strScreenshotName.c_str() );

if ( strBack ) {
    glWindow->saveImage( strBack );
    strScreenshotName = strBack;
};
}
void ShellInterface::cb_Screen(Fl_Menu_* o, void* v) {
  ((ShellInterface*)(o->parent()->user_data()))->cb_Screen_i(o,v);
}

void ShellInterface::cb_Exit_i(Fl_Menu_*, void*) {
  exit(0);
}
void ShellInterface::cb_Exit(Fl_Menu_* o, void* v) {
  ((ShellInterface*)(o->parent()->user_data()))->cb_Exit_i(o,v);
}

void ShellInterface::cb_Brush_i(Fl_Menu_*, void*) {
  glWindow->setState( GLWindow::LAB_BRUSH );
}
void ShellInterface::cb_Brush(Fl_Menu_* o, void* v) {
  ((ShellInterface*)(o->parent()->user_data()))->cb_Brush_i(o,v);
}

void ShellInterface::cb_Shapes_i(Fl_Menu_*, void*) {
  glWindow->setState( GLWindow::LAB_SHAPES );
}
void ShellInterface::cb_Shapes(Fl_Menu_* o, void* v) {
  ((ShellInterface*)(o->parent()->user_data()))->cb_Shapes_i(o,v);
}

void ShellInterface::cb_Camera_i(Fl_Menu_*, void*) {
  glWindow->setState( GLWindow::LAB_CAMERA );
}
void ShellInterface::cb_Camera(Fl_Menu_* o, void* v) {
  ((ShellInterface*)(o->parent()->user_data()))->cb_Camera_i(o,v);
}

void ShellInterface::cb_Intersection_i(Fl_Menu_*, void*) {
  glWindow->setState( GLWindow::LAB_INTERSECTION );
}
void ShellInterface::cb_Intersection(Fl_Menu_* o, void* v) {
  ((ShellInterface*)(o->parent()->user_data()))->cb_Intersection_i(o,v);
}

void ShellInterface::cb_Sceneview_i(Fl_Menu_*, void*) {
  glWindow->setState( GLWindow::LAB_SCENEVIEW );
}
void ShellInterface::cb_Sceneview(Fl_Menu_* o, void* v) {
  ((ShellInterface*)(o->parent()->user_data()))->cb_Sceneview_i(o,v);
}

void ShellInterface::cb_Interactive_i(Fl_Menu_*, void*) {
  glWindow->setState( GLWindow::LAB_USER_INTERFACE );
}
void ShellInterface::cb_Interactive(Fl_Menu_* o, void* v) {
  ((ShellInterface*)(o->parent()->user_data()))->cb_Interactive_i(o,v);
}

void ShellInterface::cb_Rendering_i(Fl_Menu_*, void*) {
  glWindow->setState( GLWindow::LAB_RENDERING );
}
void ShellInterface::cb_Rendering(Fl_Menu_* o, void* v) {
  ((ShellInterface*)(o->parent()->user_data()))->cb_Rendering_i(o,v);
}

Fl_Menu_Item ShellInterface::menu_[] = {
 {"File IO", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read image", 0,  (Fl_Callback*)ShellInterface::cb_Read, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Screen shot", 0,  (Fl_Callback*)ShellInterface::cb_Screen, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Exit", 0,  (Fl_Callback*)ShellInterface::cb_Exit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Lab", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Brush", 0,  (Fl_Callback*)ShellInterface::cb_Brush, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {"Shapes", 0,  (Fl_Callback*)ShellInterface::cb_Shapes, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {"Camera", 0,  (Fl_Callback*)ShellInterface::cb_Camera, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {"Intersection", 0,  (Fl_Callback*)ShellInterface::cb_Intersection, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {"Sceneview", 0,  (Fl_Callback*)ShellInterface::cb_Sceneview, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {"Interactive", 0,  (Fl_Callback*)ShellInterface::cb_Interactive, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {"Rendering", 0,  (Fl_Callback*)ShellInterface::cb_Rendering, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Double_Window* ShellInterface::make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = m_mainWindow = new Fl_Double_Window(810, 640, "csc321 Shell");
    w = o;
    o->user_data((void*)(this));
    { Fl_Text_Display* o = strMyName = new Fl_Text_Display(530, 5, 275, 25, "Name:");
      o->align(FL_ALIGN_LEFT);
      Fl_Group::current()->resizable(o);
    }
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(5, 5, 100, 25);
      o->labeltype(FL_NO_LABEL);
      o->menu(menu_);
    }
    { GLWindow* o = glWindow = new GLWindow(5, 35, 800, 600);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    o->end();
  }
  return w;
}

ShellInterface::ShellInterface() {
  m_mainWindow = make_window();
strImageName = "../data/tux.jpg";
strScreenshotName = "../data/screenshot.bmp";
static Fl_Text_Buffer buf;
buf.append("Dawit Tsigie");
strMyName->buffer(buf);
strMyName->show();
}
