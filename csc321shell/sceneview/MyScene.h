#ifndef _MY_SCENE_H_
#define _MY_SCENE_H_

#include "csc321.h"
#include "Color.h"
#include "camera/Camera.h"
#include "shapes/Shape.h"
#include "parser.h"
#include "Light.h"
#include <FL/Fl_Image.H>
#include <string>
#include <vector>

/*
 * This class holds all of the data in the scene file.
 *  Camera
 *  Lights
 *  Subgraphs
 *  Root subgraph
 */

class Object {
public:
	Object();
	~Object();

	void draw();
	HitRecord intersect(const Point3& o, const Vector3& dir);
	
	Shape* shape;
	Color ambient, diffuse, specular, reflect, transparent, emit;
	double shine;
	double ior;
	double textureU, textureV;
	std::string filename;
};

class Tree;
class FirstHitRecord;
class Node {
public:
	Node();
	~Node();

	void draw();
	FirstHitRecord intersect(const Point3& o, const Vector3& dir);

	Object* object;
	Tree* tree;
	Matrix4 trans, transInv, transInvT;
};

class Tree {
public:
	Tree();
	~Tree();

	void addNode(Node* n);
	void draw();
	FirstHitRecord intersect(const Point3& o, const Vector3& dir);

private:
	std::vector<Node*> nodes;
};

class MasterSubgraphs {
public:
	MasterSubgraphs();
	~MasterSubgraphs();

	void addTree(std::string name, Tree* tree);
	Tree* get(std::string name);

private:
	std::vector<std::string> names;
	std::vector<Tree*> trees;
};

class FirstHitRecord {
public:
	FirstHitRecord();
	~FirstHitRecord();

	bool hit();

	double t, u, v;
	Point3 p;
	Vector3 n;
	Node* node;
};

class MyScene {
public:
    MyScene();
    ~MyScene();

    // The start of the parsing routine
    // Called once when a new scene file is opened
    bool loadSceneFile(std::string filename);

    // Return the current error mesage (if any) generated by parsing
    std::string getErrorMessage() const;

    // Return the parsed camera
    Camera &changeCamera();

    // Return the parsed camera
    const Camera &getCamera() const;

    // Return the parsed camera
    const Color &getBackground() const;

    // Called when the window is re-sized
    void resize(int w, int h);
    // Called when the window needs to be re-drawn
    // Stub can be found in sceneview/MyScene_draw.cpp
    void draw();
    
    /* 
     * The following are for the user interaction assignment 
     * Stubs for them can be found in Interactive/MySceneSelect.cpp
     */
    // User clicked on the screen; find the corresponding shape
    bool selectNode(int x, int y);
    //
    void moveSelectedNode( const Matrix4 &matChange );
    
    /*
     * The following are for the ray tracing assignment
     * Stubs for them can be found in rendering/MyScene_render.cpp
     */
    // 
    void render(int type, int width, int height, unsigned char* pixels);
    void stopRender();
    double getRenderProgress();

    /*
     * The following are for the sceneview assignment
     * They can be found in sceneview/MyScene.cpp
     */
    // Clear out any existing data
    void resetScene();

    // Gets the background color from the scenefile
    bool parseBackground(Parser& p);

    // Gets the camera info (if any) from the scene file
    bool parseCamera(Parser& p);

    // Gets the light info (if any) from the scene file
    bool parseLight(Parser& p);

    /*
     * The following are the parsing routines you need to finish filling in.
     * Feel free to change the return type or pass in additional parameters.
     */
    // Called when subgraph _name_ [ is encountered in the scene file
    // Should return true when root subgraph encountered
	Tree* parseMasterSubgraph(Parser& p);

    // Called when trans [ is encountered
	Node* parseTrans(Parser& p);

    // Called when Object _name_ [ is encountered
	Object* parseObject(Parser& p);
	//Color getAmbientlighta
  //Color ambientLight;
private:
    // Has loadSceneFile been called yet?
    bool isLoaded;
    // Keep track of the current error message
    std::string errorMessage;
    
    // Store camera info; remember that your default camera should be
    // set to reasonable values in case there is no camera information
    // in the scene file
    Camera camera;

    // Stores the background color found in the scenefile (if any).
    // Defaults to black
    Color background;

    // The stored lights
    Color ambientLight;
    std::vector<Light> lights;

    // your functions/variables go here
	MasterSubgraphs* masters;
	Cube cube;
	Cylinder cylinder;
	Cone cone;
	Sphere sphere;
	double progress;
	bool bDoRender;

	void scanline(int w, int h, unsigned char* pixels);
	void raytrace(int w, int h, unsigned char* pixels);
	Color traceRay(Point3& o, Vector3& dir, int limit);
};

#endif /* _MY_SCENE_H_ */
